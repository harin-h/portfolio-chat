// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: chat.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chat_ClientChat_FullMethodName = "/services.Chat/ClientChat"
	Chat_OwnerChat_FullMethodName  = "/services.Chat/OwnerChat"
)

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	ClientChat(ctx context.Context, opts ...grpc.CallOption) (Chat_ClientChatClient, error)
	OwnerChat(ctx context.Context, opts ...grpc.CallOption) (Chat_OwnerChatClient, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) ClientChat(ctx context.Context, opts ...grpc.CallOption) (Chat_ClientChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[0], Chat_ClientChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatClientChatClient{stream}
	return x, nil
}

type Chat_ClientChatClient interface {
	Send(*ClientChatRequest) error
	Recv() (*ClientChatResponse, error)
	grpc.ClientStream
}

type chatClientChatClient struct {
	grpc.ClientStream
}

func (x *chatClientChatClient) Send(m *ClientChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatClientChatClient) Recv() (*ClientChatResponse, error) {
	m := new(ClientChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) OwnerChat(ctx context.Context, opts ...grpc.CallOption) (Chat_OwnerChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chat_ServiceDesc.Streams[1], Chat_OwnerChat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatOwnerChatClient{stream}
	return x, nil
}

type Chat_OwnerChatClient interface {
	Send(*OwnerChatRequest) error
	Recv() (*OwnerChatResponse, error)
	grpc.ClientStream
}

type chatOwnerChatClient struct {
	grpc.ClientStream
}

func (x *chatOwnerChatClient) Send(m *OwnerChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatOwnerChatClient) Recv() (*OwnerChatResponse, error) {
	m := new(OwnerChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	ClientChat(Chat_ClientChatServer) error
	OwnerChat(Chat_OwnerChatServer) error
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) ClientChat(Chat_ClientChatServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientChat not implemented")
}
func (UnimplementedChatServer) OwnerChat(Chat_OwnerChatServer) error {
	return status.Errorf(codes.Unimplemented, "method OwnerChat not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_ClientChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).ClientChat(&chatClientChatServer{stream})
}

type Chat_ClientChatServer interface {
	Send(*ClientChatResponse) error
	Recv() (*ClientChatRequest, error)
	grpc.ServerStream
}

type chatClientChatServer struct {
	grpc.ServerStream
}

func (x *chatClientChatServer) Send(m *ClientChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatClientChatServer) Recv() (*ClientChatRequest, error) {
	m := new(ClientChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_OwnerChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).OwnerChat(&chatOwnerChatServer{stream})
}

type Chat_OwnerChatServer interface {
	Send(*OwnerChatResponse) error
	Recv() (*OwnerChatRequest, error)
	grpc.ServerStream
}

type chatOwnerChatServer struct {
	grpc.ServerStream
}

func (x *chatOwnerChatServer) Send(m *OwnerChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatOwnerChatServer) Recv() (*OwnerChatRequest, error) {
	m := new(OwnerChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientChat",
			Handler:       _Chat_ClientChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OwnerChat",
			Handler:       _Chat_OwnerChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
